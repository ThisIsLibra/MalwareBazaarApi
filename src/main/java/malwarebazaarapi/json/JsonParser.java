/*
 * Copyright (C) 2021 Max 'Libra' Kersten [@Libranalysis, https://maxkersten.nl]
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package malwarebazaarapi.json;

import java.util.ArrayList;
import java.util.List;
import malwarebazaarapi.model.MalwareBazaarSample;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Max 'Libra' Kersten [@Libranalysis, https://maxkersten.nl]
 */
public class JsonParser {

    public boolean checkQueryStatus(String json) {
        String queryStatus = new JSONObject(json).optString("query_status");
        if (queryStatus.equalsIgnoreCase("ok")
                || queryStatus.equalsIgnoreCase("inserted")
                || queryStatus.equalsIgnoreCase("updated")
                || queryStatus.equalsIgnoreCase("success")
                || queryStatus.equalsIgnoreCase("no_results")) {
            return true;
        }
        return false;
    }

    public List<MalwareBazaarSample> parseMalwareBazaarSamples(String json) {
        List<MalwareBazaarSample> samples = new ArrayList<>();
        JSONArray jsonArray = new JSONObject(json).optJSONArray("data");
        if (jsonArray == null) {
            return samples;
        }

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonSample = jsonArray.optJSONObject(i);
            MalwareBazaarSample sample = parseMalwareBazaarSample(jsonSample);
            if (sample != null) {
                samples.add(sample);
            }

        }
        return samples;
    }

    public MalwareBazaarSample parseMalwareBazaarSample(JSONObject jsonObject) {
        if (jsonObject == null) {
            return null;
        }

        String sha256 = jsonObject.optString("sha256_hash");
        String sha3384 = jsonObject.optString("sha3_384_hash");
        String sha1 = jsonObject.optString("sha1_hash");
        String md5 = jsonObject.optString("md5_hash");
        String firstSeen = jsonObject.optString("first_seen");
        String lastSeen = jsonObject.optString("last_seen");
        if (lastSeen.isEmpty()) {
            lastSeen = firstSeen;
        }
        String fileName = jsonObject.optString("file_name");
        int fileSize = jsonObject.optInt("file_size");
        String fileTypeMime = jsonObject.optString("file_type_mime");
        String fileType = jsonObject.optString("file_type");
        String reporter = jsonObject.optString("reporter");
        int anonymousValue = jsonObject.optInt("anonymous");
        boolean anonymous = false;
        if (anonymousValue == 1) {
            anonymous = true;
        }
        String signature = jsonObject.optString("signature");
        String importHash = jsonObject.optString("imphash");
        String tlshHash = jsonObject.optString("tlsh");
        String telfhash = jsonObject.optString("telfhash");
        String ssDeep = jsonObject.optString("ssdeep");
        String dhashIcon = jsonObject.optString("dhash_icon");
        String gimpHash = jsonObject.optString("gimphash");

        List<String> tags = new ArrayList<>();
        JSONArray tagsArray = jsonObject.optJSONArray("tags");
        if (tagsArray
                != null) {
            for (int i = 0; i < tagsArray.length(); i++) {
                String tag = tagsArray.optString(i);
                if (tag.isEmpty() == false) {
                    tags.add(tag);
                }
            }
        }
        String json = jsonObject.toString();

        return new MalwareBazaarSample(sha256, sha3384, sha1, md5, firstSeen, lastSeen, fileName, fileSize, fileTypeMime, fileType, reporter, anonymous, signature, importHash, tlshHash, telfhash, ssDeep, dhashIcon, tags, gimpHash, json);
    }
}
